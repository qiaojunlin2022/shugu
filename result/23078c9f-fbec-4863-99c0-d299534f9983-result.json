{"name": "test_01_comp_add[param0]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (1018, 432). Other element would receive the click: <div class=\"ivu-modal-wrap\" style=\"z-index: 1005;\">...</div>\n  (Session info: chrome=111.0.5563.65)\nStacktrace:\nBacktrace:\n\t(No symbol) [0x00CB37D3]\n\t(No symbol) [0x00C48B81]\n\t(No symbol) [0x00B4B36D]\n\t(No symbol) [0x00B84E3B]\n\t(No symbol) [0x00B826DB]\n\t(No symbol) [0x00B7FD0B]\n\t(No symbol) [0x00B7E4D8]\n\t(No symbol) [0x00B73253]\n\t(No symbol) [0x00B9B41C]\n\t(No symbol) [0x00B72B96]\n\t(No symbol) [0x00B9B774]\n\t(No symbol) [0x00BB1215]\n\t(No symbol) [0x00B9B216]\n\t(No symbol) [0x00B70D97]\n\t(No symbol) [0x00B7253D]\n\tGetHandleVerifier [0x00F2ABF2+2510930]\n\tGetHandleVerifier [0x00F58EC1+2700065]\n\tGetHandleVerifier [0x00F5C86C+2714828]\n\tGetHandleVerifier [0x00D63480+645344]\n\t(No symbol) [0x00C50FD2]\n\t(No symbol) [0x00C56C68]\n\t(No symbol) [0x00C56D4B]\n\t(No symbol) [0x00C60D6B]\n\tBaseThreadInitThunk [0x76CA00F9+25]\n\tRtlGetAppContainerNamedObjectPath [0x77187BBE+286]\n\tRtlGetAppContainerNamedObjectPath [0x77187B8E+238]", "trace": "self = <class 'tcases.sup.test_sup_add.TestSupAdd'>\n\n    def setup_class(self):\n        self.plogin: Plogin = Plogin()\n        self.pcompAdd: SupAdd = SupAdd()\n        self.plogin.open_url(pconst.const_url)\n        self.plogin.input_user_pass(conf['user_name'], conf['password'], conf['code'])\n>       self.plogin.button_login()\n\ntcases\\sup\\test_sup_add.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\login\\p_login.py:53: in button_login\n    self.driver.click(self.locator_button_login)\ncommon\\driver.py:60: in click\n    element.click()\nD:\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:88: in click\n    self._execute(Command.CLICK_ELEMENT)\nD:\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:396: in _execute\n    return self._parent.execute(command, params)\nD:\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:435: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001E8D4689E40>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77187BBE+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77187B8E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"{}.{}\".format(frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span>...</span> is not clickable at point (1018, 432). Other element would receive the click: <div class=\"ivu-modal-wrap\" style=\"z-index: 1005;\">...</div>\nE         (Session info: chrome=111.0.5563.65)\nE       Stacktrace:\nE       Backtrace:\nE       \t(No symbol) [0x00CB37D3]\nE       \t(No symbol) [0x00C48B81]\nE       \t(No symbol) [0x00B4B36D]\nE       \t(No symbol) [0x00B84E3B]\nE       \t(No symbol) [0x00B826DB]\nE       \t(No symbol) [0x00B7FD0B]\nE       \t(No symbol) [0x00B7E4D8]\nE       \t(No symbol) [0x00B73253]\nE       \t(No symbol) [0x00B9B41C]\nE       \t(No symbol) [0x00B72B96]\nE       \t(No symbol) [0x00B9B774]\nE       \t(No symbol) [0x00BB1215]\nE       \t(No symbol) [0x00B9B216]\nE       \t(No symbol) [0x00B70D97]\nE       \t(No symbol) [0x00B7253D]\nE       \tGetHandleVerifier [0x00F2ABF2+2510930]\nE       \tGetHandleVerifier [0x00F58EC1+2700065]\nE       \tGetHandleVerifier [0x00F5C86C+2714828]\nE       \tGetHandleVerifier [0x00D63480+645344]\nE       \t(No symbol) [0x00C50FD2]\nE       \t(No symbol) [0x00C56C68]\nE       \t(No symbol) [0x00C56D4B]\nE       \t(No symbol) [0x00C60D6B]\nE       \tBaseThreadInitThunk [0x76CA00F9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x77187BBE+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x77187B8E+238]\n\nD:\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:247: ElementClickInterceptedException"}, "parameters": [{"name": "param", "value": "{'name': '测试供应商', 'code': 20200, 'contacts': 13825, 'phone': 18700894367}"}], "start": 1679041177953, "stop": 1679041177953, "uuid": "df7d0b15-ec93-47aa-8fdb-1a413ec2d39a", "historyId": "c9ebc1351d7f1e61f5a5201aaaf0a2f0", "testCaseId": "39564f4861f754bda76d59294449b3bd", "fullName": "tcases.sup.test_sup_add.TestSupAdd#test_01_comp_add", "labels": [{"name": "parentSuite", "value": "tcases.sup"}, {"name": "suite", "value": "test_sup_add"}, {"name": "subSuite", "value": "TestSupAdd"}, {"name": "host", "value": "sh-szkj-qiaojl"}, {"name": "thread", "value": "29480-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tcases.sup.test_sup_add"}]}